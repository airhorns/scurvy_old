class MovieMaker
  class << self
    def add_release_at_path(path)
      begin
      if File.directory?(path) 
        imdb = search_nfos(path)
        if imdb
          puts "imdb from nfo: #{imdb}"
        end
      end
      
      if !imdb
        imdb = fetch_first_imdb_result_for_filename(File.basename(path))
        puts "imdb from filename: #{imdb}"
      end
      
      if imdb
        movie = Movie.from_imdb(imdb)
      else
        movieinfo = {
          :title => "[AUTOGEN-FAIL] " + get_title_from_filename(path),
          :autogenerated => true
        }
        movie = Movie.new(movieinfo)
      end
      
      if movie.new_record? 
        d = Download.new(:approved => false, :active => true, :created_by => 0)
        d.resource = movie
        movie.download = d
        if(movie.genres)
          d.tag_list.add(movie.genres) 
        end
      end
              
      # @todo Add in parsing of release types
      r = Release.new(:release_type => ReleaseType.find_by_name('Unknown'))
      if File.directory?(path)
        r.root_path = path
      end
        
      Find.find(path) do |x|
        unless File.directory?(x) 
          puts "movie file: #{x}"
          r.locations << Location.new(:location => x)
        end
      end
      
      movie.download.releases << r
      r.download = movie.download
      
      movie.save! 
      
      # rescue Exception => e
      #   puts "Error with path: "+e.message
      #   Floater.create!(:location => path, :guess => 'movie', :release_id => '0')
      end
      
    end
    
    def fetch_first_imdb_result_for_filename(filename)
      title = get_title_from_filename(filename);
      search = Imdb::Search.new(title)
      m = search.movies[0] || false
      m
    end
    
    def search_nfos(path)
      Dir.chdir(path)
      Dir['*.nfo'].each do |nfo|
        nfo = File.open(nfo, "rb").read
        if /imdb\.com\/title\/tt([0-9]+)/.match(nfo) 
          return $1
        end
      end
      return false
    end
    
    def get_title_from_filename(filename)
      title = filename.gsub(/\/|(?:readinfo|readnfo|xvid|dvdrip|dvd rip|dvdscreener|screener|dvdscr|dvd|rls|limited|ac3|fs|ws|subbed|internal|r5|bdrip|cd1|cd2|avi|wmv|xvid|divx|bluray|1080p|720p|1080i|480i|proper|dts|x\.264|x264|re.pack|rerepack).*|\[.+?\]|\*|\/$/i, '')
      title = title.gsub(/-[^\s]+?$/, '')
      title = title.gsub(/-|_|\./, ' ')
      return title
    end 
  end
end