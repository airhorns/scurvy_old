class Track < ActiveRecord::Base
  belongs_to :album
  belongs_to :artist
  default_scope :order => 'position ASC'
  attr_accessor :scrobble_record
  
  validates_presence_of :name
  validates_inclusion_of :autogenerated, :in => [true, false]
  validates_associated :artist, :album
  validates_numericality_of :lastfm_id, :allow_nil => true
  validates_numericality_of :duration, :allow_nil => true
  validates_numericality_of :bitrate, :allow_nil => true
  validates_numericality_of :listeners, :allow_nil => true
  validates_numericality_of :position, :allow_nil => true
  
  validates_url_format_of :url, :allow_nil => true
  
  class << self
    def new_from_scrobbler(track, artist = nil, album = nil, autogenerated = true)
      raise ArgumentError, "Track must be of type Scrobbler::Track" if track.class != Scrobbler::Track
      artist = Artist.from_scrobbler(track.artist) if artist.nil?
      album = Album.from_scrobbler(track.album, artist) if album.nil?
      r_track = Track.new(:artist => artist, :album => album, :lastfm_id => track.id, :mb_id => track.mbid, :url => track.url, :name => track.name, :duration => track.duration, :autogenerated => autogenerated)
      r_track.scrobble_record = track;
      r_track
    end
  
    def from_scrobbler(track, artist = nil, album = nil) 
      raise ArgumentError, "Track must be of type Scrobbler::Track" if track.class != Scrobbler::Track
      
      r_track = Track.find_by_lastfm_id(track.id)
      if r_track.nil?
        r_track = Track.new_from_scrobbler(track, artist, album)
      end
      r_track
    end
    
    def new_from_id3tag(tag)
      track = Scrobbler::Track.new(tag.artist, :name => tag.title , :include_info => true)
      album = Album.from_id3tag(tag)
      Track.from_scrobbler(track, album.artist, album)
    end
    def from_id3tag(tag)
      track = Track.find(:first, :include => [:artist, :album], :conditions => {:tracks => {:name => tag.title }, :artists => {:name => tag.artist}, :albums => {:name => tag.album}})
      if track.nil?
        track = Track.new_from_id3tag(tag)
      end
      track.position = tag.tracknum
      track
    end
  end
end